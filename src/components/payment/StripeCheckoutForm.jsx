import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  useStripe,
  useElements,
  CardNumberElement,
  CardExpiryElement,
  CardCvcElement,
} from "@stripe/react-stripe-js";
import { Button } from "../ui/button";
import { toast } from "sonner";
import { CreditCard, Calendar, Lock } from "lucide-react";
import { confirmStripePayment } from "../../api/Payment";
import useSrisiamStore from "../../store/Srisiam-store";

const CARD_ELEMENT_OPTIONS = {
  style: {
    base: {
      fontSize: "16px",
      color: "#1f2937",
      fontFamily: "Inter, system-ui, sans-serif",
      "::placeholder": {
        color: "#9ca3af",
      },
      padding: "12px",
    },
    invalid: {
      color: "#ef4444",
      iconColor: "#ef4444",
    },
  },
};

const StripeCheckoutForm = ({ clientSecret, orderId, amount, paymentId }) => {
  const stripe = useStripe();
  const elements = useElements();
  const navigate = useNavigate();
  const token = useSrisiamStore((state) => state.token);

  const [loading, setLoading] = useState(false);
  const [billingDetails, setBillingDetails] = useState({
    name: "",
    postalCode: "",
  });

  const handleChange = (e) => {
    setBillingDetails({
      ...billingDetails,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!billingDetails.name.trim()) {
      toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏ö‡∏±‡∏ï‡∏£");
      return;
    }

    setLoading(true);

    try {
      const cardElement = elements.getElement(CardNumberElement);

      const { error, paymentIntent } = await stripe.confirmCardPayment(
        clientSecret,
        {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: billingDetails.name,
              address: {
                postal_code: billingDetails.postalCode || undefined,
              },
            },
          },
        }
      );

      if (error) {
        console.error("Payment failed:", error);
        
        // ‡πÅ‡∏õ‡∏• error message ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        let errorMessage = error.message;
        if (error.code === "card_declined") {
          errorMessage = "‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏ö‡∏≠‡∏∑‡πà‡∏ô";
        } else if (error.code === "insufficient_funds") {
          errorMessage = "‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠";
        } else if (error.code === "expired_card") {
          errorMessage = "‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß";
        } else if (error.code === "incorrect_cvc") {
          errorMessage = "‡∏£‡∏´‡∏±‡∏™ CVV ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
        } else if (error.code === "processing_error") {
          errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
        }

        toast.error(errorMessage);
      } else if (paymentIntent.status === "succeeded") {
        // console.log("üí≥ Payment succeeded! PaymentIntent ID:", paymentIntent.id);
        toast.success("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...");
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ confirm payment 
        try {
          const response = await confirmStripePayment(token, paymentIntent.id);
        } catch (confirmError) {
          console.error(" Error confirming payment:", confirmError);
          console.error("Error details:", confirmError.response?.data);
          // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á show error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ webhook ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        }
        
        // Navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ success
        setTimeout(() => {
          navigate(`/payment/success?orderId=${orderId}&paymentId=${paymentId}`);
        }, 1500);
      }
    } catch (err) {
      console.error("Error processing payment:", err);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô */}
      <div className="bg-indigo-50 rounded-lg p-4 mb-6">
        <div className="flex items-center justify-between">
          <span className="text-gray-700 font-medium">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
          <span className="text-2xl font-bold text-indigo-600">
            ‡∏ø{parseFloat(amount).toLocaleString("th-TH", {
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            })}
          </span>
        </div>
      </div>

      {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <p className="text-sm text-blue-800">
          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏î‡∏ö‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ú‡πà‡∏≤‡∏ô{" "}
          <strong>Stripe</strong> ‡πÇ‡∏î‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </p>
      </div>

      {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏ö‡∏±‡∏ï‡∏£ */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡∏ö‡∏±‡∏ï‡∏£
        </label>
        <input
          type="text"
          name="name"
          value={billingDetails.name}
          onChange={handleChange}
          placeholder="JOHN DOE"
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
          required
        />
      </div>

      {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          <CreditCard className="inline-block w-4 h-4 mr-2" />
          ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
        </label>
        <div className="px-4 py-3 border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-indigo-500 focus-within:border-indigo-500 transition-all bg-white">
          <CardNumberElement options={CARD_ELEMENT_OPTIONS} />
        </div>
      </div>

      {/* ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞ CVV */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            <Calendar className="inline-block w-4 h-4 mr-2" />
            ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏(MM/YY)
          </label>
          <div className="px-4 py-3 border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-indigo-500 focus-within:border-indigo-500 transition-all bg-white">
            <CardExpiryElement options={CARD_ELEMENT_OPTIONS} />
          </div>
        </div>

        <div className="space-y-2">
          <label className="block text-sm font-medium text-gray-700">
            <Lock className="inline-block w-4 h-4 mr-2" />
            CVV
          </label>
          <div className="px-4 py-3 border border-gray-300 rounded-lg focus-within:ring-2 focus-within:ring-indigo-500 focus-within:border-indigo-500 transition-all bg-white">
            <CardCvcElement options={CARD_ELEMENT_OPTIONS} />
          </div>
        </div>
      </div>

      {/* ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (Optional) */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-700">
          ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        </label>
        <input
          type="text"
          name="postalCode"
          value={billingDetails.postalCode}
          onChange={handleChange}
          placeholder="12345"
          maxLength="5"
          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
        />
      </div>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
      <div className="flex gap-4 pt-4">
        <Button
          type="button"
          variant="outline"
          onClick={() => navigate("/checkout")}
          disabled={loading}
          className="flex-1"
        >
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </Button>
        <Button
          type="submit"
          disabled={!stripe || loading}
          className="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? (
            <span className="flex items-center justify-center">
              <svg
                className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...
            </span>
          ) : (
            `‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡∏ø${parseFloat(amount).toLocaleString("th-TH")}`
          )}
        </Button>
      </div>
    </form>
  );
};

export default StripeCheckoutForm;
